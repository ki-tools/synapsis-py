import typing as t
from . import Synapse as Synapse
from synapseclient.core.cache import Cache as Cache
import synapseclient
import typing

Incomplete = t.Any


class SynapseUtils:
    __synapse__: Synapse
    def __init__(self, synapse: Synapse) -> None: ...
    def __getattr__(self, item: str) -> t.Any: ...
    def copyFileHandles(self, fileHandles, associateObjectTypes, associateObjectIds, newContentTypes: Incomplete | None = ..., newFileNames: Incomplete | None = ...): ...
    def changeFileMetaData(self, entity, downloadAs: Incomplete | None = ..., contentType: Incomplete | None = ..., forceVersion: bool = ...): ...
    def copy(self, entity, destinationId, skipCopyWikiPage: bool = ..., skipCopyAnnotations: bool = ..., **kwargs): ...
    def copyWiki(self, entity, destinationId, entitySubPageId: Incomplete | None = ..., destinationSubPageId: Incomplete | None = ..., updateLinks: bool = ..., updateSynIds: bool = ..., entityMap: Incomplete | None = ...): ...
    def describe(self, entity: str): ...
    def index_files_for_migration(self: synapseclient.Synapse, entity, dest_storage_location_id: str, db_path: str, source_storage_location_ids: typing.Iterable[str] = ..., file_version_strategy: str = ..., include_table_files: bool = ..., continue_on_error: bool = ...): ...
    def migrate_indexed_files(self: synapseclient.Synapse, db_path: str, create_table_snapshots: bool = ..., continue_on_error: bool = ..., force: bool = ...): ...
    def notifyMe(self, messageSubject: str = ..., retries: int = ...): ...
    def with_progress_bar(func, totalCalls, prefix: str = ..., postfix: str = ..., isBytes: bool = ...): ...
    def syncFromSynapse(self, entity, path: Incomplete | None = ..., ifcollision: str = ..., allFiles: Incomplete | None = ..., followLink: bool = ..., manifest: str = ..., downloadFile: bool = ...): ...
    def syncToSynapse(self, manifestFile, dryRun: bool = ..., sendMessages: bool = ..., retries=...) -> None: ...
    def generate_sync_manifest(self, directory_path, parent_id, manifest_path) -> None: ...
    def walk(self, synId, includeTypes=...): ...
class SynapseutilsAttrWrapper:
    __synapse__: Synapse
    __attr__: t.Any
    def __init__(self, synapse: Synapse, attr: t.Any) -> None: ...
    def __getattr__(self, item): ...
    def __call__(self, *args, **kwargs): ...
