import typing as t
from . import Synapse as Synapse
from synapseclient.core.cache import Cache as Cache
import synapseclient
import typing

Incomplete = t.Any


class SynapseUtils:
    __synapse__: Synapse
    def __init__(self, synapse: Synapse) -> None: ...
    def __getattr__(self, item: str) -> t.Any: ...
    def copyFileHandles(self, fileHandles, associateObjectTypes, associateObjectIds, newContentTypes: Incomplete | None = None, newFileNames: Incomplete | None = None): ...
    def changeFileMetaData(self, entity, downloadAs: Incomplete | None = None, contentType: Incomplete | None = None, forceVersion: bool = True): ...
    def copy(self, entity, destinationId, skipCopyWikiPage: bool = False, skipCopyAnnotations: bool = False, **kwargs): ...
    def copyWiki(self, entity, destinationId, entitySubPageId: Incomplete | None = None, destinationSubPageId: Incomplete | None = None, updateLinks: bool = True, updateSynIds: bool = True, entityMap: Incomplete | None = None): ...
    def describe(self, entity: str): ...
    def index_files_for_migration(self: synapseclient.Synapse, entity, dest_storage_location_id: str, db_path: str, source_storage_location_ids: typing.Iterable[str] = None, file_version_strategy: str = 'new', include_table_files: bool = False, continue_on_error: bool = False): ...
    def migrate_indexed_files(self: synapseclient.Synapse, db_path: str, create_table_snapshots: bool = True, continue_on_error: bool = False, force: bool = False): ...
    def notifyMe(self, messageSubject: str = '', retries: int = 0): ...
    def with_progress_bar(func, totalCalls, prefix: str = '', postfix: str = '', isBytes: bool = False): ...
    def syncFromSynapse(self, entity, path: Incomplete | None = None, ifcollision: str = 'overwrite.local', allFiles: Incomplete | None = None, followLink: bool = False, manifest: str = 'all', downloadFile: bool = True): ...
    def syncToSynapse(self, manifestFile, dryRun: bool = False, sendMessages: bool = True, retries=...) -> None: ...
    def generate_sync_manifest(self, directory_path, parent_id, manifest_path) -> None: ...
    def walk(self, synId, includeTypes=['folder', 'file', 'table', 'link', 'entityview', 'dockerrepo', 'submissionview', 'dataset', 'materializedview']): ...
class SynapseutilsAttrWrapper:
    __synapse__: Synapse
    __attr__: t.Any
    def __init__(self, synapse: Synapse, attr: t.Any) -> None: ...
    def __getattr__(self, item): ...
    def __call__(self, *args, **kwargs): ...
